// Generated by CoffeeScript 1.6.3
(function() {
  var $, FLIP_TRIGGER_AREA_SIZE, FlipbookPage, PAGE_BACK_COLOR, _;

  $ = jQuery;

  _ = createjs;

  PAGE_BACK_COLOR = '#FFFF00';

  FLIP_TRIGGER_AREA_SIZE = 50;

  /*
  TEST URLS
  */


  window.urls = ['http://www.apple.com/', 'http://www.facebook.com/', 'http://www.google.com/', 'http://twitter.com/', 'http://www.youtube.com/'];

  $(function() {
    var i, loadManifest;
    window.preload = new _.LoadQueue();
    preload.addEventListener('complete', onResourcesLoaded);
    loadManifest = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 4; i = ++_i) {
        _results.push({
          id: "page" + i,
          src: "pages/" + i + ".jpg"
        });
      }
      return _results;
    })();
    return preload.loadManifest(loadManifest);
  });

  /*
  PRELOAD HANDLER
  */


  window.onResourcesLoaded = function() {
    var i;
    window.stage = new _.Stage('main-canvas');
    stage.enableMouseOver();
    window.pages = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 4; i = ++_i) {
        _results.push(new FlipbookPage(new _.Bitmap(preload.getResult("page" + i)), urls[i]));
      }
      return _results;
    })();
    window.flipBook = new _.Container();
    flipBook.pageSize = pages[0].image.size();
    stage.addChild(flipBook);
    flipBook.x = flipBook.pageSize.width / 2;
    flipBook.y = flipBook.pageSize.height / 2;
    window.globalFlipTriggerPoint = flipBook.localToGlobal(FLIP_TRIGGER_AREA_SIZE, flipBook.pageSize.height - FLIP_TRIGGER_AREA_SIZE);
    window.currentPage = 0;
    flipBook.addChild(pages[currentPage].image);
    window.lineOfSymmetry = {};
    window.clipShape = new _.Shape();
    window.clipShapeReflection = new _.Shape();
    window.pageCorner = {
      size: 0
    };
    window.cornerClipShape = new _.Shape();
    window.cornerClipShapeReflection = new _.Shape();
    window.flippingPage = false;
    window.fadingPage = false;
    window.foldingCorner = false;
    flipBook.addEventListener('click', onClick);
    flipBook.addEventListener('mouseover', onMouseOver);
    flipBook.addEventListener('mouseout', onMouseOut);
    _.Ticker.setFPS(40);
    _.Ticker.addEventListener('tick', onTick);
    return stage.update();
  };

  /*
  EVENT HANDLERS
  */


  window.onClick = function(event) {
    if (!animating()) {
      if (withinFlipTriggerBounds(event)) {
        window.flippingPage = true;
        window.foldingCorner = false;
        pageCorner.size = 0;
        onFoldComplete();
        ++currentPage;
        currentPage %= pages.length;
        flipBook.addChild(pages[currentPage].image);
        lineOfSymmetry.hotspot = 0;
        lineOfSymmetry.theta = 45;
        clipShapeReflection.alpha = 1;
        return _.Tween.get(lineOfSymmetry).to({
          hotspot: flipBook.pageSize.height,
          theta: 90
        }, 1000).call(onFlipComplete);
      } else {
        return redirect(pages[currentPage].url);
      }
    }
  };

  window.onMouseOver = function(event) {
    if (!animating()) {
      window.foldingCorner = true;
      flipBook.addChild(pages[(currentPage + 1) % pages.length].image);
      _.Tween.removeTweens(pageCorner);
      return _.Tween.get(pageCorner).to({
        size: FLIP_TRIGGER_AREA_SIZE
      }, 500);
    }
  };

  window.onMouseOut = function(event) {
    if (!animating()) {
      _.Tween.removeTweens(pageCorner);
      return _.Tween.get(pageCorner).to({
        size: 0
      }, 500).call(onFoldComplete);
    }
  };

  window.onTick = function() {
    var topIntersection, vertices;
    if (flippingPage) {
      lineOfSymmetry.h = lineOfSymmetry.hotspot * Math.tan(toRadians(lineOfSymmetry.theta));
      topIntersection = flipBook.pageSize.width / Math.tan(toRadians(lineOfSymmetry.theta));
      vertices = topIntersection > lineOfSymmetry.hotspot ? [new _.Point(0, 0), new _.Point(lineOfSymmetry.h, lineOfSymmetry.hotspot), new _.Point(0, lineOfSymmetry.hotspot)] : [new _.Point(0, 0), new _.Point(flipBook.pageSize.width, topIntersection), new _.Point(flipBook.pageSize.width, lineOfSymmetry.hotspot), new _.Point(0, lineOfSymmetry.hotspot)];
      clipShape.graphics.clear().drawPolygon(vertices);
      clipShape.x = 0;
      clipShape.y = flipBook.pageSize.height - lineOfSymmetry.hotspot;
      pages[currentPage].image.mask = clipShape;
      clipShapeReflection.graphics.clear().beginFill(PAGE_BACK_COLOR).drawPolygon(vertices);
      clipShapeReflection.x = 0;
      clipShapeReflection.y = flipBook.pageSize.height - lineOfSymmetry.hotspot;
      clipShapeReflection.scaleY = -1;
      clipShapeReflection.rotation = 180 - 2 * lineOfSymmetry.theta;
      flipBook.addChild(clipShapeReflection);
    }
    if (foldingCorner) {
      vertices = [new _.Point(0, 0), new _.Point(0, -pageCorner.size), new _.Point(pageCorner.size, 0)];
      cornerClipShape.graphics.clear().drawPolygon(vertices);
      cornerClipShape.x = 0;
      cornerClipShape.y = flipBook.pageSize.height;
      pages[(currentPage + 1) % pages.length].image.mask = cornerClipShape;
      cornerClipShapeReflection.graphics.clear().beginFill(PAGE_BACK_COLOR).drawPolygon(vertices);
      cornerClipShapeReflection.x = pageCorner.size;
      cornerClipShapeReflection.y = flipBook.pageSize.height - pageCorner.size;
      cornerClipShapeReflection.scaleX = -1;
      cornerClipShapeReflection.scaleY = -1;
      flipBook.addChild(cornerClipShapeReflection);
    }
    if (animating() || foldingCorner) {
      return stage.update();
    }
  };

  window.onFlipComplete = function() {
    var _ref;
    window.flippingPage = false;
    window.fadingPage = true;
    flipBook.removeChild((_ref = pages[currentPage - 1]) != null ? _ref.image : void 0);
    delete pages[currentPage].image.mask;
    return _.Tween.get(clipShapeReflection).to({
      alpha: 0,
      y: -50,
      rotation: -10
    }, 200).call(onFadeComplete);
  };

  window.onFadeComplete = function() {
    window.fadingPage = false;
    onMouseOut();
    return onMouseOver();
  };

  window.onFoldComplete = function() {
    window.foldingCorner = false;
    flipBook.removeChild(cornerClipShapeReflection);
    return delete pages[currentPage].image.mask;
  };

  /*
  UTILITY FUNCTIONS
  */


  window.toRadians = function(degrees) {
    return Math.PI * degrees / 180;
  };

  window.animating = function() {
    return flippingPage || fadingPage;
  };

  window.withinFlipTriggerBounds = function(event) {
    return event.stageX < globalFlipTriggerPoint.x && event.stageY > globalFlipTriggerPoint.y;
  };

  window.redirect = function(url, newTab, delay) {
    if (delay != null) {
      return setTimeout(function() {
        return redirect(url, newTab);
      }, delay);
    } else if (newTab) {
      return open(url);
    } else {
      return location.href = url;
    }
  };

  /*
  CUSTOM CLASSES
  */


  FlipbookPage = (function() {
    function FlipbookPage(image, url) {
      this.image = image;
      this.url = url;
    }

    return FlipbookPage;

  })();

  /*
  PROTOTYPE EXTENSIONS
  */


  _.DisplayObject.prototype.size = function(width, height) {
    if ((width != null) && (height != null)) {
      this.scaleX = width / this.image.width;
      return this.scaleY = height / this.image.height;
    } else {
      return {
        width: this.scaleX * this.image.width,
        height: this.scaleY * this.image.height
      };
    }
  };

  _.Graphics.prototype.drawPolygon = function(vertices) {
    var i, _i, _ref;
    this.moveTo(vertices[0].x, vertices[0].y);
    for (i = _i = 1, _ref = vertices.length; _i < _ref; i = _i += 1) {
      this.lineTo(vertices[i].x, vertices[i].y);
    }
    return this.closePath();
  };

}).call(this);
