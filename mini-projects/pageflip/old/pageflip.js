// Generated by CoffeeScript 1.6.3
(function() {
  var $, _;

  $ = jQuery;

  _ = createjs;

  $(function() {
    window.preload = new _.LoadQueue();
    preload.addEventListener("complete", onResourcesLoaded);
    return preload.loadManifest([
      {
        id: "page0",
        src: "pages/0.jpg"
      }, {
        id: "page1",
        src: "pages/1.jpg"
      }
    ]);
  });

  window.onResourcesLoaded = function() {
    var page, _i, _len;
    window.stage = new _.Stage("main-canvas");
    window.pageBitmaps = [];
    pageBitmaps.push(new _.Bitmap(preload.getResult("page0")));
    pageBitmaps.push(new _.Bitmap(preload.getResult("page1")));
    window.flipBook = new _.Container();
    flipBook.pageSize = pageBitmaps[0].size();
    for (_i = 0, _len = pageBitmaps.length; _i < _len; _i++) {
      page = pageBitmaps[_i];
      flipBook.addChild(page);
    }
    stage.addChild(flipBook);
    flipBook.x = flipBook.pageSize.width;
    flipBook.y = flipBook.pageSize.height;
    window.lineOfSymmetry = {};
    window.clipShape = new _.Shape();
    window.areaC = new _.Shape();
    window.animating = false;
    stage.addEventListener("click", onClick);
    _.Ticker.setFPS(40);
    _.Ticker.addEventListener("tick", onTick);
    return stage.update();
  };

  window.onClick = function() {
    if (!animating) {
      window.animating = true;
      lineOfSymmetry.hotspot = 0;
      lineOfSymmetry.theta = 45;
      flipBook.addChild(pageBitmaps[0]);
      return _.Tween.get(lineOfSymmetry).to({
        hotspot: flipBook.pageSize.width,
        theta: 90
      }, 2000);
    }
  };

  window.onTick = function() {
    var topIntersection, vertices;
    if (animating) {
      lineOfSymmetry.h = lineOfSymmetry.hotspot * Math.tan(toRadians(lineOfSymmetry.theta));
      topIntersection = flipBook.pageSize.height / Math.tan(toRadians(lineOfSymmetry.theta));
      console.log(topIntersection);
      vertices = topIntersection > lineOfSymmetry.hotspot ? [new _.Point(0, 0), new _.Point(lineOfSymmetry.hotspot, -lineOfSymmetry.h), new _.Point(lineOfSymmetry.hotspot, 0)] : [new _.Point(0, 0), new _.Point(topIntersection, -flipBook.pageSize.height), new _.Point(lineOfSymmetry.hotspot, -flipBook.pageSize.height), new _.Point(lineOfSymmetry.hotspot, 0)];
      clipShape.graphics = new _.Graphics().drawPolygon(vertices);
      clipShape.x = flipBook.pageSize.width - lineOfSymmetry.hotspot;
      clipShape.y = flipBook.pageSize.height;
      pageBitmaps[0].mask = clipShape;
      areaC.graphics = new _.Graphics().beginFill("#FFFF00").drawPolygon(vertices);
      areaC.x = flipBook.pageSize.width - lineOfSymmetry.hotspot;
      areaC.y = flipBook.pageSize.height;
      areaC.scaleX = -1;
      areaC.rotation = 180 - 2 * lineOfSymmetry.theta;
      flipBook.addChild(areaC);
      return stage.update();
    }
  };

  window.toRadians = function(degrees) {
    return Math.PI * degrees / 180;
  };

  _.DisplayObject.prototype.size = function(width, height) {
    if ((width != null) && (height != null)) {
      this.scaleX = width / this.image.width;
      return this.scaleY = height / this.image.height;
    } else {
      return {
        width: this.scaleX * this.image.width,
        height: this.scaleY * this.image.height
      };
    }
  };

  _.Graphics.prototype.drawPolygon = function(vertices) {
    var i, _i, _ref;
    this.moveTo(vertices[0].x, vertices[0].y);
    for (i = _i = 1, _ref = vertices.length; _i < _ref; i = _i += 1) {
      this.lineTo(vertices[i].x, vertices[i].y);
    }
    return this.closePath();
  };

}).call(this);
